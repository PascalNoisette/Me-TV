import subprocess

Import('environment')

def PkgCheckModules(context, library, versionSpecification):
    pattern = '{} {}'.format(library, versionSpecification) if versionSpecification else library
    context.Message('Checking for ' + pattern + ' ... ')
    returnCode = subprocess.call(['pkg-config', '--exists', pattern])
    if returnCode == 0:
        context.Result('ok')
        context.env.MergeFlags('!pkg-config --cflags --libs ' + library)
        return True
    context.Result('failed')
    return False

configFileWritten = False

def createConfiguration(environment, dependenciesKey):
    global configFileWritten
    configuration = Configure(environment, custom_tests={'PkgCheckModules': PkgCheckModules}, config_h='config.h')  # , clean=False, help=False)
    failedConfiguration = False
    for library, versionPattern in configuration.env[dependenciesKey]:
        if not configuration.PkgCheckModules(library, versionPattern):
            failedConfiguration = True
    if failedConfiguration:
        Exit(1)
    for entry in ['VERSION', 'GETTEXT_PACKAGE', 'PACKAGE_NAME', 'PACKAGE_DATA_DIR', 'PACKAGE_LOCALE_DIR']:
        if not configFileWritten:
            configuration.Define(entry, '"' + environment[entry] + '"')
        configuration.env.Append(CPPDEFINES='{}=\\"{}\\"'.format(entry, environment[entry]))
    if not configFileWritten: configuration.Define('ENABLE_NLS', 1)
    configFileWritten = True
    configuration.env.Append(CPPDEFINES='HAVE_CONFIG_H')
    configuration.env.Append(CPPPATH='.')  # This is crucial for triggering entering config.h in the DAG.
    return configuration.Finish()

mainEnvironment = createConfiguration(environment.Clone(), 'main_dependencies')
defaultPlayerEnvironment = createConfiguration(environment.Clone(), 'xine_player_dependencies')
xinePlayerEnvironment = createConfiguration(environment.Clone(), 'xine_player_dependencies')

sources = Glob('*.cc') + Glob('*.cpp')
defaultPlayer = File('me-tv-player.cc')
xinePlayer = File('me-tv-player-xine.cpp')

for player in (defaultPlayer, xinePlayer,): sources.remove(player)

metv = mainEnvironment.Program('me-tv', sources)
metvDefaultPlayer = defaultPlayerEnvironment.Program(defaultPlayer)
metvXinePlayer = xinePlayerEnvironment.Program(xinePlayer)

Return('metv', 'metvDefaultPlayer', 'metvXinePlayer')
